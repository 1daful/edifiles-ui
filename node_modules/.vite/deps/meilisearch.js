import {
  __commonJS,
  __toESM
} from "./chunk-DFKQJ226.js";

// ../service/node_modules/cross-fetch/dist/browser-polyfill.js
var require_browser_polyfill = __commonJS({
  "../service/node_modules/cross-fetch/dist/browser-polyfill.js"(exports) {
    (function(self2) {
      var irrelevant = function(exports2) {
        var support = {
          searchParams: "URLSearchParams" in self2,
          iterable: "Symbol" in self2 && "iterator" in Symbol,
          blob: "FileReader" in self2 && "Blob" in self2 && function() {
            try {
              new Blob();
              return true;
            } catch (e) {
              return false;
            }
          }(),
          formData: "FormData" in self2,
          arrayBuffer: "ArrayBuffer" in self2
        };
        function isDataView(obj) {
          return obj && DataView.prototype.isPrototypeOf(obj);
        }
        if (support.arrayBuffer) {
          var viewClasses = [
            "[object Int8Array]",
            "[object Uint8Array]",
            "[object Uint8ClampedArray]",
            "[object Int16Array]",
            "[object Uint16Array]",
            "[object Int32Array]",
            "[object Uint32Array]",
            "[object Float32Array]",
            "[object Float64Array]"
          ];
          var isArrayBufferView = ArrayBuffer.isView || function(obj) {
            return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
          };
        }
        function normalizeName(name) {
          if (typeof name !== "string") {
            name = String(name);
          }
          if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) {
            throw new TypeError("Invalid character in header field name");
          }
          return name.toLowerCase();
        }
        function normalizeValue(value) {
          if (typeof value !== "string") {
            value = String(value);
          }
          return value;
        }
        function iteratorFor(items) {
          var iterator = {
            next: function() {
              var value = items.shift();
              return { done: value === void 0, value };
            }
          };
          if (support.iterable) {
            iterator[Symbol.iterator] = function() {
              return iterator;
            };
          }
          return iterator;
        }
        function Headers(headers) {
          this.map = {};
          if (headers instanceof Headers) {
            headers.forEach(function(value, name) {
              this.append(name, value);
            }, this);
          } else if (Array.isArray(headers)) {
            headers.forEach(function(header) {
              this.append(header[0], header[1]);
            }, this);
          } else if (headers) {
            Object.getOwnPropertyNames(headers).forEach(function(name) {
              this.append(name, headers[name]);
            }, this);
          }
        }
        Headers.prototype.append = function(name, value) {
          name = normalizeName(name);
          value = normalizeValue(value);
          var oldValue = this.map[name];
          this.map[name] = oldValue ? oldValue + ", " + value : value;
        };
        Headers.prototype["delete"] = function(name) {
          delete this.map[normalizeName(name)];
        };
        Headers.prototype.get = function(name) {
          name = normalizeName(name);
          return this.has(name) ? this.map[name] : null;
        };
        Headers.prototype.has = function(name) {
          return this.map.hasOwnProperty(normalizeName(name));
        };
        Headers.prototype.set = function(name, value) {
          this.map[normalizeName(name)] = normalizeValue(value);
        };
        Headers.prototype.forEach = function(callback, thisArg) {
          for (var name in this.map) {
            if (this.map.hasOwnProperty(name)) {
              callback.call(thisArg, this.map[name], name, this);
            }
          }
        };
        Headers.prototype.keys = function() {
          var items = [];
          this.forEach(function(value, name) {
            items.push(name);
          });
          return iteratorFor(items);
        };
        Headers.prototype.values = function() {
          var items = [];
          this.forEach(function(value) {
            items.push(value);
          });
          return iteratorFor(items);
        };
        Headers.prototype.entries = function() {
          var items = [];
          this.forEach(function(value, name) {
            items.push([name, value]);
          });
          return iteratorFor(items);
        };
        if (support.iterable) {
          Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
        }
        function consumed(body) {
          if (body.bodyUsed) {
            return Promise.reject(new TypeError("Already read"));
          }
          body.bodyUsed = true;
        }
        function fileReaderReady(reader) {
          return new Promise(function(resolve, reject) {
            reader.onload = function() {
              resolve(reader.result);
            };
            reader.onerror = function() {
              reject(reader.error);
            };
          });
        }
        function readBlobAsArrayBuffer(blob) {
          var reader = new FileReader();
          var promise = fileReaderReady(reader);
          reader.readAsArrayBuffer(blob);
          return promise;
        }
        function readBlobAsText(blob) {
          var reader = new FileReader();
          var promise = fileReaderReady(reader);
          reader.readAsText(blob);
          return promise;
        }
        function readArrayBufferAsText(buf) {
          var view = new Uint8Array(buf);
          var chars = new Array(view.length);
          for (var i = 0; i < view.length; i++) {
            chars[i] = String.fromCharCode(view[i]);
          }
          return chars.join("");
        }
        function bufferClone(buf) {
          if (buf.slice) {
            return buf.slice(0);
          } else {
            var view = new Uint8Array(buf.byteLength);
            view.set(new Uint8Array(buf));
            return view.buffer;
          }
        }
        function Body() {
          this.bodyUsed = false;
          this._initBody = function(body) {
            this._bodyInit = body;
            if (!body) {
              this._bodyText = "";
            } else if (typeof body === "string") {
              this._bodyText = body;
            } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
              this._bodyBlob = body;
            } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
              this._bodyFormData = body;
            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
              this._bodyText = body.toString();
            } else if (support.arrayBuffer && support.blob && isDataView(body)) {
              this._bodyArrayBuffer = bufferClone(body.buffer);
              this._bodyInit = new Blob([this._bodyArrayBuffer]);
            } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
              this._bodyArrayBuffer = bufferClone(body);
            } else {
              this._bodyText = body = Object.prototype.toString.call(body);
            }
            if (!this.headers.get("content-type")) {
              if (typeof body === "string") {
                this.headers.set("content-type", "text/plain;charset=UTF-8");
              } else if (this._bodyBlob && this._bodyBlob.type) {
                this.headers.set("content-type", this._bodyBlob.type);
              } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
              }
            }
          };
          if (support.blob) {
            this.blob = function() {
              var rejected = consumed(this);
              if (rejected) {
                return rejected;
              }
              if (this._bodyBlob) {
                return Promise.resolve(this._bodyBlob);
              } else if (this._bodyArrayBuffer) {
                return Promise.resolve(new Blob([this._bodyArrayBuffer]));
              } else if (this._bodyFormData) {
                throw new Error("could not read FormData body as blob");
              } else {
                return Promise.resolve(new Blob([this._bodyText]));
              }
            };
            this.arrayBuffer = function() {
              if (this._bodyArrayBuffer) {
                return consumed(this) || Promise.resolve(this._bodyArrayBuffer);
              } else {
                return this.blob().then(readBlobAsArrayBuffer);
              }
            };
          }
          this.text = function() {
            var rejected = consumed(this);
            if (rejected) {
              return rejected;
            }
            if (this._bodyBlob) {
              return readBlobAsText(this._bodyBlob);
            } else if (this._bodyArrayBuffer) {
              return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
            } else if (this._bodyFormData) {
              throw new Error("could not read FormData body as text");
            } else {
              return Promise.resolve(this._bodyText);
            }
          };
          if (support.formData) {
            this.formData = function() {
              return this.text().then(decode);
            };
          }
          this.json = function() {
            return this.text().then(JSON.parse);
          };
          return this;
        }
        var methods = ["DELETE", "GET", "HEAD", "OPTIONS", "POST", "PUT"];
        function normalizeMethod(method) {
          var upcased = method.toUpperCase();
          return methods.indexOf(upcased) > -1 ? upcased : method;
        }
        function Request(input, options) {
          options = options || {};
          var body = options.body;
          if (input instanceof Request) {
            if (input.bodyUsed) {
              throw new TypeError("Already read");
            }
            this.url = input.url;
            this.credentials = input.credentials;
            if (!options.headers) {
              this.headers = new Headers(input.headers);
            }
            this.method = input.method;
            this.mode = input.mode;
            this.signal = input.signal;
            if (!body && input._bodyInit != null) {
              body = input._bodyInit;
              input.bodyUsed = true;
            }
          } else {
            this.url = String(input);
          }
          this.credentials = options.credentials || this.credentials || "same-origin";
          if (options.headers || !this.headers) {
            this.headers = new Headers(options.headers);
          }
          this.method = normalizeMethod(options.method || this.method || "GET");
          this.mode = options.mode || this.mode || null;
          this.signal = options.signal || this.signal;
          this.referrer = null;
          if ((this.method === "GET" || this.method === "HEAD") && body) {
            throw new TypeError("Body not allowed for GET or HEAD requests");
          }
          this._initBody(body);
        }
        Request.prototype.clone = function() {
          return new Request(this, { body: this._bodyInit });
        };
        function decode(body) {
          var form = new FormData();
          body.trim().split("&").forEach(function(bytes) {
            if (bytes) {
              var split = bytes.split("=");
              var name = split.shift().replace(/\+/g, " ");
              var value = split.join("=").replace(/\+/g, " ");
              form.append(decodeURIComponent(name), decodeURIComponent(value));
            }
          });
          return form;
        }
        function parseHeaders(rawHeaders) {
          var headers = new Headers();
          var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, " ");
          preProcessedHeaders.split(/\r?\n/).forEach(function(line) {
            var parts = line.split(":");
            var key = parts.shift().trim();
            if (key) {
              var value = parts.join(":").trim();
              headers.append(key, value);
            }
          });
          return headers;
        }
        Body.call(Request.prototype);
        function Response2(bodyInit, options) {
          if (!options) {
            options = {};
          }
          this.type = "default";
          this.status = options.status === void 0 ? 200 : options.status;
          this.ok = this.status >= 200 && this.status < 300;
          this.statusText = "statusText" in options ? options.statusText : "OK";
          this.headers = new Headers(options.headers);
          this.url = options.url || "";
          this._initBody(bodyInit);
        }
        Body.call(Response2.prototype);
        Response2.prototype.clone = function() {
          return new Response2(this._bodyInit, {
            status: this.status,
            statusText: this.statusText,
            headers: new Headers(this.headers),
            url: this.url
          });
        };
        Response2.error = function() {
          var response = new Response2(null, { status: 0, statusText: "" });
          response.type = "error";
          return response;
        };
        var redirectStatuses = [301, 302, 303, 307, 308];
        Response2.redirect = function(url, status) {
          if (redirectStatuses.indexOf(status) === -1) {
            throw new RangeError("Invalid status code");
          }
          return new Response2(null, { status, headers: { location: url } });
        };
        exports2.DOMException = self2.DOMException;
        try {
          new exports2.DOMException();
        } catch (err) {
          exports2.DOMException = function(message, name) {
            this.message = message;
            this.name = name;
            var error = Error(message);
            this.stack = error.stack;
          };
          exports2.DOMException.prototype = Object.create(Error.prototype);
          exports2.DOMException.prototype.constructor = exports2.DOMException;
        }
        function fetch2(input, init) {
          return new Promise(function(resolve, reject) {
            var request = new Request(input, init);
            if (request.signal && request.signal.aborted) {
              return reject(new exports2.DOMException("Aborted", "AbortError"));
            }
            var xhr = new XMLHttpRequest();
            function abortXhr() {
              xhr.abort();
            }
            xhr.onload = function() {
              var options = {
                status: xhr.status,
                statusText: xhr.statusText,
                headers: parseHeaders(xhr.getAllResponseHeaders() || "")
              };
              options.url = "responseURL" in xhr ? xhr.responseURL : options.headers.get("X-Request-URL");
              var body = "response" in xhr ? xhr.response : xhr.responseText;
              resolve(new Response2(body, options));
            };
            xhr.onerror = function() {
              reject(new TypeError("Network request failed"));
            };
            xhr.ontimeout = function() {
              reject(new TypeError("Network request failed"));
            };
            xhr.onabort = function() {
              reject(new exports2.DOMException("Aborted", "AbortError"));
            };
            xhr.open(request.method, request.url, true);
            if (request.credentials === "include") {
              xhr.withCredentials = true;
            } else if (request.credentials === "omit") {
              xhr.withCredentials = false;
            }
            if ("responseType" in xhr && support.blob) {
              xhr.responseType = "blob";
            }
            request.headers.forEach(function(value, name) {
              xhr.setRequestHeader(name, value);
            });
            if (request.signal) {
              request.signal.addEventListener("abort", abortXhr);
              xhr.onreadystatechange = function() {
                if (xhr.readyState === 4) {
                  request.signal.removeEventListener("abort", abortXhr);
                }
              };
            }
            xhr.send(typeof request._bodyInit === "undefined" ? null : request._bodyInit);
          });
        }
        fetch2.polyfill = true;
        if (!self2.fetch) {
          self2.fetch = fetch2;
          self2.Headers = Headers;
          self2.Request = Request;
          self2.Response = Response2;
        }
        exports2.Headers = Headers;
        exports2.Request = Request;
        exports2.Response = Response2;
        exports2.fetch = fetch2;
        Object.defineProperty(exports2, "__esModule", { value: true });
        return exports2;
      }({});
    })(typeof self !== "undefined" ? self : exports);
  }
});

// browser-external:crypto
var require_crypto = __commonJS({
  "browser-external:crypto"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "crypto" has been externalized for browser compatibility. Cannot access "crypto.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// ../service/node_modules/meilisearch/dist/bundles/meilisearch.esm.js
var import_polyfill = __toESM(require_browser_polyfill());
var import_crypto = __toESM(require_crypto());
var MatchingStrategies = {
  ALL: "all",
  LAST: "last"
};
var ContentTypeEnum = {
  JSON: "application/json",
  CSV: "text/csv",
  NDJSON: "application/x-ndjson"
};
var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2)
      if (Object.prototype.hasOwnProperty.call(b2, p))
        d2[p] = b2[p];
  };
  return extendStatics(d, b);
};
function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
  __assign = Object.assign || function __assign2(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
var MeiliSearchCommunicationError = (
  /** @class */
  function(_super) {
    __extends(MeiliSearchCommunicationError2, _super);
    function MeiliSearchCommunicationError2(message, body, url, stack) {
      var _this = this;
      var _a, _b, _c;
      _this = _super.call(this, message) || this;
      Object.setPrototypeOf(_this, MeiliSearchCommunicationError2.prototype);
      _this.name = "MeiliSearchCommunicationError";
      if (body instanceof Response) {
        _this.message = body.statusText;
        _this.statusCode = body.status;
      }
      if (body instanceof Error) {
        _this.errno = body.errno;
        _this.code = body.code;
      }
      if (stack) {
        _this.stack = stack;
        _this.stack = (_a = _this.stack) === null || _a === void 0 ? void 0 : _a.replace(/(TypeError|FetchError)/, _this.name);
        _this.stack = (_b = _this.stack) === null || _b === void 0 ? void 0 : _b.replace("Failed to fetch", "request to ".concat(url, " failed, reason: connect ECONNREFUSED"));
        _this.stack = (_c = _this.stack) === null || _c === void 0 ? void 0 : _c.replace("Not Found", "Not Found: ".concat(url));
      } else {
        if (Error.captureStackTrace) {
          Error.captureStackTrace(_this, MeiliSearchCommunicationError2);
        }
      }
      return _this;
    }
    return MeiliSearchCommunicationError2;
  }(Error)
);
var MeiliSearchApiError = (
  /** @class */
  function(_super) {
    __extends(class_1, _super);
    function class_1(error, status) {
      var _this = _super.call(this, error.message) || this;
      Object.setPrototypeOf(_this, MeiliSearchApiError.prototype);
      _this.name = "MeiliSearchApiError";
      _this.code = error.code;
      _this.type = error.type;
      _this.link = error.link;
      _this.message = error.message;
      _this.httpStatus = status;
      if (Error.captureStackTrace) {
        Error.captureStackTrace(_this, MeiliSearchApiError);
      }
      return _this;
    }
    return class_1;
  }(Error)
);
function httpResponseErrorHandler(response) {
  return __awaiter(this, void 0, void 0, function() {
    var responseBody;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (!!response.ok)
            return [3, 5];
          responseBody = void 0;
          _a.label = 1;
        case 1:
          _a.trys.push([1, 3, , 4]);
          return [4, response.json()];
        case 2:
          responseBody = _a.sent();
          return [3, 4];
        case 3:
          _a.sent();
          throw new MeiliSearchCommunicationError(response.statusText, response, response.url);
        case 4:
          throw new MeiliSearchApiError(responseBody, response.status);
        case 5:
          return [2, response];
      }
    });
  });
}
function httpErrorHandler(response, stack, url) {
  if (response.name !== "MeiliSearchApiError") {
    throw new MeiliSearchCommunicationError(response.message, response, url, stack);
  }
  throw response;
}
var MeiliSearchError = (
  /** @class */
  function(_super) {
    __extends(MeiliSearchError2, _super);
    function MeiliSearchError2(message) {
      var _this = _super.call(this, message) || this;
      Object.setPrototypeOf(_this, MeiliSearchError2.prototype);
      _this.name = "MeiliSearchError";
      if (Error.captureStackTrace) {
        Error.captureStackTrace(_this, MeiliSearchError2);
      }
      return _this;
    }
    return MeiliSearchError2;
  }(Error)
);
var MeiliSearchTimeOutError = (
  /** @class */
  function(_super) {
    __extends(MeiliSearchTimeOutError2, _super);
    function MeiliSearchTimeOutError2(message) {
      var _this = _super.call(this, message) || this;
      Object.setPrototypeOf(_this, MeiliSearchTimeOutError2.prototype);
      _this.name = "MeiliSearchTimeOutError";
      if (Error.captureStackTrace) {
        Error.captureStackTrace(_this, MeiliSearchTimeOutError2);
      }
      return _this;
    }
    return MeiliSearchTimeOutError2;
  }(Error)
);
function removeUndefinedFromObject(obj) {
  return Object.entries(obj).reduce(function(acc, curEntry) {
    var key = curEntry[0], val = curEntry[1];
    if (val !== void 0)
      acc[key] = val;
    return acc;
  }, {});
}
function sleep(ms) {
  return __awaiter(this, void 0, void 0, function() {
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          return [4, new Promise(function(resolve) {
            return setTimeout(resolve, ms);
          })];
        case 1:
          return [2, _a.sent()];
      }
    });
  });
}
function addProtocolIfNotPresent(host) {
  if (!(host.startsWith("https://") || host.startsWith("http://"))) {
    return "http://".concat(host);
  }
  return host;
}
function addTrailingSlash(url) {
  if (!url.endsWith("/")) {
    url += "/";
  }
  return url;
}
function validateUuid4(uuid) {
  var regexExp = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/gi;
  return regexExp.test(uuid);
}
var PACKAGE_VERSION = "0.32.3";
function toQueryParams(parameters) {
  var params = Object.keys(parameters);
  var queryParams = params.reduce(function(acc, key) {
    var _a, _b, _c;
    var value = parameters[key];
    if (value === void 0) {
      return acc;
    } else if (Array.isArray(value)) {
      return __assign(__assign({}, acc), (_a = {}, _a[key] = value.join(","), _a));
    } else if (value instanceof Date) {
      return __assign(__assign({}, acc), (_b = {}, _b[key] = value.toISOString(), _b));
    }
    return __assign(__assign({}, acc), (_c = {}, _c[key] = value, _c));
  }, {});
  return queryParams;
}
function constructHostURL(host) {
  try {
    host = addProtocolIfNotPresent(host);
    host = addTrailingSlash(host);
    return host;
  } catch (e) {
    throw new MeiliSearchError("The provided host is not valid.");
  }
}
function cloneAndParseHeaders(headers) {
  if (Array.isArray(headers)) {
    return headers.reduce(function(acc, headerPair) {
      acc[headerPair[0]] = headerPair[1];
      return acc;
    }, {});
  } else if ("has" in headers) {
    var clonedHeaders_1 = {};
    headers.forEach(function(value, key) {
      return clonedHeaders_1[key] = value;
    });
    return clonedHeaders_1;
  } else {
    return Object.assign({}, headers);
  }
}
function createHeaders(config) {
  var _a, _b;
  var agentHeader = "X-Meilisearch-Client";
  var packageAgent = "Meilisearch JavaScript (v".concat(PACKAGE_VERSION, ")");
  var contentType = "Content-Type";
  var authorization = "Authorization";
  var headers = cloneAndParseHeaders((_b = (_a = config.requestConfig) === null || _a === void 0 ? void 0 : _a.headers) !== null && _b !== void 0 ? _b : {});
  if (config.apiKey && !headers[authorization]) {
    headers[authorization] = "Bearer ".concat(config.apiKey);
  }
  if (!headers[contentType]) {
    headers["Content-Type"] = "application/json";
  }
  if (config.clientAgents && Array.isArray(config.clientAgents)) {
    var clients = config.clientAgents.concat(packageAgent);
    headers[agentHeader] = clients.join(" ; ");
  } else if (config.clientAgents && !Array.isArray(config.clientAgents)) {
    throw new MeiliSearchError('Meilisearch: The header "'.concat(agentHeader, '" should be an array of string(s).\n'));
  } else {
    headers[agentHeader] = packageAgent;
  }
  return headers;
}
var HttpRequests = (
  /** @class */
  function() {
    function HttpRequests2(config) {
      this.headers = createHeaders(config);
      this.requestConfig = config.requestConfig;
      this.httpClient = config.httpClient;
      try {
        var host = constructHostURL(config.host);
        this.url = new URL(host);
      } catch (e) {
        throw new MeiliSearchError("The provided host is not valid.");
      }
    }
    HttpRequests2.prototype.request = function(_a) {
      var _b;
      var method = _a.method, url = _a.url, params = _a.params, body = _a.body, _c = _a.config, config = _c === void 0 ? {} : _c;
      return __awaiter(this, void 0, void 0, function() {
        var constructURL, queryParams_1, headers, fetchFn, result, response, parsedBody, e_1, stack;
        return __generator(this, function(_d) {
          switch (_d.label) {
            case 0:
              constructURL = new URL(url, this.url);
              if (params) {
                queryParams_1 = new URLSearchParams();
                Object.keys(params).filter(function(x) {
                  return params[x] !== null;
                }).map(function(x) {
                  return queryParams_1.set(x, params[x]);
                });
                constructURL.search = queryParams_1.toString();
              }
              if (!((_b = config.headers) === null || _b === void 0 ? void 0 : _b["Content-Type"])) {
                body = JSON.stringify(body);
              }
              headers = __assign(__assign({}, this.headers), config.headers);
              _d.label = 1;
            case 1:
              _d.trys.push([1, 6, , 7]);
              fetchFn = this.httpClient ? this.httpClient : fetch;
              result = fetchFn(constructURL.toString(), __assign(__assign(__assign({}, config), this.requestConfig), { method, body, headers }));
              if (!this.httpClient)
                return [3, 3];
              return [4, result];
            case 2:
              return [2, _d.sent()];
            case 3:
              return [4, result.then(function(res) {
                return httpResponseErrorHandler(res);
              })];
            case 4:
              response = _d.sent();
              return [4, response.json()["catch"](function() {
                return void 0;
              })];
            case 5:
              parsedBody = _d.sent();
              return [2, parsedBody];
            case 6:
              e_1 = _d.sent();
              stack = e_1.stack;
              httpErrorHandler(e_1, stack, constructURL.toString());
              return [3, 7];
            case 7:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    HttpRequests2.prototype.get = function(url, params, config) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.request({
                method: "GET",
                url,
                params,
                config
              })];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    HttpRequests2.prototype.post = function(url, data, params, config) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.request({
                method: "POST",
                url,
                body: data,
                params,
                config
              })];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    HttpRequests2.prototype.put = function(url, data, params, config) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.request({
                method: "PUT",
                url,
                body: data,
                params,
                config
              })];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    HttpRequests2.prototype.patch = function(url, data, params, config) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.request({
                method: "PATCH",
                url,
                body: data,
                params,
                config
              })];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    HttpRequests2.prototype["delete"] = function(url, data, params, config) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.request({
                method: "DELETE",
                url,
                body: data,
                params,
                config
              })];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    return HttpRequests2;
  }()
);
var EnqueuedTask = (
  /** @class */
  function() {
    function EnqueuedTask2(task) {
      this.taskUid = task.taskUid;
      this.indexUid = task.indexUid;
      this.status = task.status;
      this.type = task.type;
      this.enqueuedAt = new Date(task.enqueuedAt);
    }
    return EnqueuedTask2;
  }()
);
var Task = (
  /** @class */
  function() {
    function Task2(task) {
      this.indexUid = task.indexUid;
      this.status = task.status;
      this.type = task.type;
      this.uid = task.uid;
      this.details = task.details;
      this.canceledBy = task.canceledBy;
      this.error = task.error;
      this.duration = task.duration;
      this.startedAt = new Date(task.startedAt);
      this.enqueuedAt = new Date(task.enqueuedAt);
      this.finishedAt = new Date(task.finishedAt);
    }
    return Task2;
  }()
);
var TaskClient = (
  /** @class */
  function() {
    function TaskClient2(config) {
      this.httpRequest = new HttpRequests(config);
    }
    TaskClient2.prototype.getTask = function(uid) {
      return __awaiter(this, void 0, void 0, function() {
        var url, taskItem;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "tasks/".concat(uid);
              return [4, this.httpRequest.get(url)];
            case 1:
              taskItem = _a.sent();
              return [2, new Task(taskItem)];
          }
        });
      });
    };
    TaskClient2.prototype.getTasks = function(parameters) {
      if (parameters === void 0) {
        parameters = {};
      }
      return __awaiter(this, void 0, void 0, function() {
        var url, tasks;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "tasks";
              return [4, this.httpRequest.get(url, toQueryParams(parameters))];
            case 1:
              tasks = _a.sent();
              return [2, __assign(__assign({}, tasks), { results: tasks.results.map(function(task) {
                return new Task(task);
              }) })];
          }
        });
      });
    };
    TaskClient2.prototype.waitForTask = function(taskUid, _a) {
      var _b = _a === void 0 ? {} : _a, _c = _b.timeOutMs, timeOutMs = _c === void 0 ? 5e3 : _c, _d = _b.intervalMs, intervalMs = _d === void 0 ? 50 : _d;
      return __awaiter(this, void 0, void 0, function() {
        var startingTime, response;
        return __generator(this, function(_e) {
          switch (_e.label) {
            case 0:
              startingTime = Date.now();
              _e.label = 1;
            case 1:
              if (!(Date.now() - startingTime < timeOutMs))
                return [3, 4];
              return [4, this.getTask(taskUid)];
            case 2:
              response = _e.sent();
              if (![
                "enqueued",
                "processing"
                /* TaskStatus.TASK_PROCESSING */
              ].includes(response.status))
                return [2, response];
              return [4, sleep(intervalMs)];
            case 3:
              _e.sent();
              return [3, 1];
            case 4:
              throw new MeiliSearchTimeOutError("timeout of ".concat(timeOutMs, "ms has exceeded on process ").concat(taskUid, " when waiting a task to be resolved."));
          }
        });
      });
    };
    TaskClient2.prototype.waitForTasks = function(taskUids, _a) {
      var _b = _a === void 0 ? {} : _a, _c = _b.timeOutMs, timeOutMs = _c === void 0 ? 5e3 : _c, _d = _b.intervalMs, intervalMs = _d === void 0 ? 50 : _d;
      return __awaiter(this, void 0, void 0, function() {
        var tasks, _i, taskUids_1, taskUid, task;
        return __generator(this, function(_e) {
          switch (_e.label) {
            case 0:
              tasks = [];
              _i = 0, taskUids_1 = taskUids;
              _e.label = 1;
            case 1:
              if (!(_i < taskUids_1.length))
                return [3, 4];
              taskUid = taskUids_1[_i];
              return [4, this.waitForTask(taskUid, {
                timeOutMs,
                intervalMs
              })];
            case 2:
              task = _e.sent();
              tasks.push(task);
              _e.label = 3;
            case 3:
              _i++;
              return [3, 1];
            case 4:
              return [2, tasks];
          }
        });
      });
    };
    TaskClient2.prototype.cancelTasks = function(parameters) {
      if (parameters === void 0) {
        parameters = {};
      }
      return __awaiter(this, void 0, void 0, function() {
        var url, task;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "tasks/cancel";
              return [4, this.httpRequest.post(url, {}, toQueryParams(parameters))];
            case 1:
              task = _a.sent();
              return [2, new EnqueuedTask(task)];
          }
        });
      });
    };
    TaskClient2.prototype.deleteTasks = function(parameters) {
      if (parameters === void 0) {
        parameters = {};
      }
      return __awaiter(this, void 0, void 0, function() {
        var url, task;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "tasks";
              return [4, this.httpRequest["delete"](url, {}, toQueryParams(parameters))];
            case 1:
              task = _a.sent();
              return [2, new EnqueuedTask(task)];
          }
        });
      });
    };
    return TaskClient2;
  }()
);
var Index = (
  /** @class */
  function() {
    function Index2(config, uid, primaryKey) {
      this.uid = uid;
      this.primaryKey = primaryKey;
      this.httpRequest = new HttpRequests(config);
      this.tasks = new TaskClient(config);
    }
    Index2.prototype.search = function(query, options, config) {
      return __awaiter(this, void 0, void 0, function() {
        var url;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "indexes/".concat(this.uid, "/search");
              return [4, this.httpRequest.post(url, removeUndefinedFromObject(__assign({ q: query }, options)), void 0, config)];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    Index2.prototype.searchGet = function(query, options, config) {
      var _a, _b, _c, _d, _e;
      return __awaiter(this, void 0, void 0, function() {
        var url, parseFilter, getParams;
        return __generator(this, function(_f) {
          switch (_f.label) {
            case 0:
              url = "indexes/".concat(this.uid, "/search");
              parseFilter = function(filter) {
                if (typeof filter === "string")
                  return filter;
                else if (Array.isArray(filter))
                  throw new MeiliSearchError("The filter query parameter should be in string format when using searchGet");
                else
                  return void 0;
              };
              getParams = __assign(__assign({ q: query }, options), { filter: parseFilter(options === null || options === void 0 ? void 0 : options.filter), sort: (_a = options === null || options === void 0 ? void 0 : options.sort) === null || _a === void 0 ? void 0 : _a.join(","), facets: (_b = options === null || options === void 0 ? void 0 : options.facets) === null || _b === void 0 ? void 0 : _b.join(","), attributesToRetrieve: (_c = options === null || options === void 0 ? void 0 : options.attributesToRetrieve) === null || _c === void 0 ? void 0 : _c.join(","), attributesToCrop: (_d = options === null || options === void 0 ? void 0 : options.attributesToCrop) === null || _d === void 0 ? void 0 : _d.join(","), attributesToHighlight: (_e = options === null || options === void 0 ? void 0 : options.attributesToHighlight) === null || _e === void 0 ? void 0 : _e.join(",") });
              return [4, this.httpRequest.get(url, removeUndefinedFromObject(getParams), config)];
            case 1:
              return [2, _f.sent()];
          }
        });
      });
    };
    Index2.prototype.getRawInfo = function() {
      return __awaiter(this, void 0, void 0, function() {
        var url, res;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "indexes/".concat(this.uid);
              return [4, this.httpRequest.get(url)];
            case 1:
              res = _a.sent();
              this.primaryKey = res.primaryKey;
              this.updatedAt = new Date(res.updatedAt);
              this.createdAt = new Date(res.createdAt);
              return [2, res];
          }
        });
      });
    };
    Index2.prototype.fetchInfo = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.getRawInfo()];
            case 1:
              _a.sent();
              return [2, this];
          }
        });
      });
    };
    Index2.prototype.fetchPrimaryKey = function() {
      return __awaiter(this, void 0, void 0, function() {
        var _a;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              _a = this;
              return [4, this.getRawInfo()];
            case 1:
              _a.primaryKey = _b.sent().primaryKey;
              return [2, this.primaryKey];
          }
        });
      });
    };
    Index2.create = function(uid, options, config) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(this, void 0, void 0, function() {
        var url, req, task;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "indexes";
              req = new HttpRequests(config);
              return [4, req.post(url, __assign(__assign({}, options), { uid }))];
            case 1:
              task = _a.sent();
              return [2, new EnqueuedTask(task)];
          }
        });
      });
    };
    Index2.prototype.update = function(data) {
      return __awaiter(this, void 0, void 0, function() {
        var url, task;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "indexes/".concat(this.uid);
              return [4, this.httpRequest.patch(url, data)];
            case 1:
              task = _a.sent();
              task.enqueuedAt = new Date(task.enqueuedAt);
              return [2, task];
          }
        });
      });
    };
    Index2.prototype["delete"] = function() {
      return __awaiter(this, void 0, void 0, function() {
        var url, task;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "indexes/".concat(this.uid);
              return [4, this.httpRequest["delete"](url)];
            case 1:
              task = _a.sent();
              return [2, new EnqueuedTask(task)];
          }
        });
      });
    };
    Index2.prototype.getTasks = function(parameters) {
      if (parameters === void 0) {
        parameters = {};
      }
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.tasks.getTasks(__assign(__assign({}, parameters), { indexUids: [this.uid] }))];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    Index2.prototype.getTask = function(taskUid) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.tasks.getTask(taskUid)];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    Index2.prototype.waitForTasks = function(taskUids, _a) {
      var _b = _a === void 0 ? {} : _a, _c = _b.timeOutMs, timeOutMs = _c === void 0 ? 5e3 : _c, _d = _b.intervalMs, intervalMs = _d === void 0 ? 50 : _d;
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_e) {
          switch (_e.label) {
            case 0:
              return [4, this.tasks.waitForTasks(taskUids, {
                timeOutMs,
                intervalMs
              })];
            case 1:
              return [2, _e.sent()];
          }
        });
      });
    };
    Index2.prototype.waitForTask = function(taskUid, _a) {
      var _b = _a === void 0 ? {} : _a, _c = _b.timeOutMs, timeOutMs = _c === void 0 ? 5e3 : _c, _d = _b.intervalMs, intervalMs = _d === void 0 ? 50 : _d;
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_e) {
          switch (_e.label) {
            case 0:
              return [4, this.tasks.waitForTask(taskUid, {
                timeOutMs,
                intervalMs
              })];
            case 1:
              return [2, _e.sent()];
          }
        });
      });
    };
    Index2.prototype.getStats = function() {
      return __awaiter(this, void 0, void 0, function() {
        var url;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "indexes/".concat(this.uid, "/stats");
              return [4, this.httpRequest.get(url)];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    Index2.prototype.getDocuments = function(parameters) {
      if (parameters === void 0) {
        parameters = {};
      }
      return __awaiter(this, void 0, void 0, function() {
        var url, fields;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "indexes/".concat(this.uid, "/documents");
              fields = function() {
                var _a2;
                if (Array.isArray(parameters === null || parameters === void 0 ? void 0 : parameters.fields)) {
                  return (_a2 = parameters === null || parameters === void 0 ? void 0 : parameters.fields) === null || _a2 === void 0 ? void 0 : _a2.join(",");
                }
                return void 0;
              }();
              return [4, this.httpRequest.get(url, removeUndefinedFromObject(__assign(__assign({}, parameters), { fields })))];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    Index2.prototype.getDocument = function(documentId, parameters) {
      return __awaiter(this, void 0, void 0, function() {
        var url, fields;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "indexes/".concat(this.uid, "/documents/").concat(documentId);
              fields = function() {
                var _a2;
                if (Array.isArray(parameters === null || parameters === void 0 ? void 0 : parameters.fields)) {
                  return (_a2 = parameters === null || parameters === void 0 ? void 0 : parameters.fields) === null || _a2 === void 0 ? void 0 : _a2.join(",");
                }
                return void 0;
              }();
              return [4, this.httpRequest.get(url, removeUndefinedFromObject(__assign(__assign({}, parameters), { fields })))];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    Index2.prototype.addDocuments = function(documents, options) {
      return __awaiter(this, void 0, void 0, function() {
        var url, task;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "indexes/".concat(this.uid, "/documents");
              return [4, this.httpRequest.post(url, documents, options)];
            case 1:
              task = _a.sent();
              return [2, new EnqueuedTask(task)];
          }
        });
      });
    };
    Index2.prototype.addDocumentsFromString = function(documents, contentType, queryParams) {
      return __awaiter(this, void 0, void 0, function() {
        var url, task;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "indexes/".concat(this.uid, "/documents");
              return [4, this.httpRequest.post(url, documents, queryParams, {
                headers: {
                  "Content-Type": contentType
                }
              })];
            case 1:
              task = _a.sent();
              return [2, new EnqueuedTask(task)];
          }
        });
      });
    };
    Index2.prototype.addDocumentsInBatches = function(documents, batchSize, options) {
      if (batchSize === void 0) {
        batchSize = 1e3;
      }
      return __awaiter(this, void 0, void 0, function() {
        var updates, i, _a, _b;
        return __generator(this, function(_c) {
          switch (_c.label) {
            case 0:
              updates = [];
              i = 0;
              _c.label = 1;
            case 1:
              if (!(i < documents.length))
                return [3, 4];
              _b = (_a = updates).push;
              return [4, this.addDocuments(documents.slice(i, i + batchSize), options)];
            case 2:
              _b.apply(_a, [_c.sent()]);
              _c.label = 3;
            case 3:
              i += batchSize;
              return [3, 1];
            case 4:
              return [2, updates];
          }
        });
      });
    };
    Index2.prototype.updateDocuments = function(documents, options) {
      return __awaiter(this, void 0, void 0, function() {
        var url, task;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "indexes/".concat(this.uid, "/documents");
              return [4, this.httpRequest.put(url, documents, options)];
            case 1:
              task = _a.sent();
              return [2, new EnqueuedTask(task)];
          }
        });
      });
    };
    Index2.prototype.updateDocumentsInBatches = function(documents, batchSize, options) {
      if (batchSize === void 0) {
        batchSize = 1e3;
      }
      return __awaiter(this, void 0, void 0, function() {
        var updates, i, _a, _b;
        return __generator(this, function(_c) {
          switch (_c.label) {
            case 0:
              updates = [];
              i = 0;
              _c.label = 1;
            case 1:
              if (!(i < documents.length))
                return [3, 4];
              _b = (_a = updates).push;
              return [4, this.updateDocuments(documents.slice(i, i + batchSize), options)];
            case 2:
              _b.apply(_a, [_c.sent()]);
              _c.label = 3;
            case 3:
              i += batchSize;
              return [3, 1];
            case 4:
              return [2, updates];
          }
        });
      });
    };
    Index2.prototype.updateDocumentsFromString = function(documents, contentType, queryParams) {
      return __awaiter(this, void 0, void 0, function() {
        var url, task;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "indexes/".concat(this.uid, "/documents");
              return [4, this.httpRequest.put(url, documents, queryParams, {
                headers: {
                  "Content-Type": contentType
                }
              })];
            case 1:
              task = _a.sent();
              return [2, new EnqueuedTask(task)];
          }
        });
      });
    };
    Index2.prototype.deleteDocument = function(documentId) {
      return __awaiter(this, void 0, void 0, function() {
        var url, task;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "indexes/".concat(this.uid, "/documents/").concat(documentId);
              return [4, this.httpRequest["delete"](url)];
            case 1:
              task = _a.sent();
              task.enqueuedAt = new Date(task.enqueuedAt);
              return [2, task];
          }
        });
      });
    };
    Index2.prototype.deleteDocuments = function(documentsIds) {
      return __awaiter(this, void 0, void 0, function() {
        var url, task;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "indexes/".concat(this.uid, "/documents/delete-batch");
              return [4, this.httpRequest.post(url, documentsIds)];
            case 1:
              task = _a.sent();
              return [2, new EnqueuedTask(task)];
          }
        });
      });
    };
    Index2.prototype.deleteAllDocuments = function() {
      return __awaiter(this, void 0, void 0, function() {
        var url, task;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "indexes/".concat(this.uid, "/documents");
              return [4, this.httpRequest["delete"](url)];
            case 1:
              task = _a.sent();
              task.enqueuedAt = new Date(task.enqueuedAt);
              return [2, task];
          }
        });
      });
    };
    Index2.prototype.getSettings = function() {
      return __awaiter(this, void 0, void 0, function() {
        var url;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "indexes/".concat(this.uid, "/settings");
              return [4, this.httpRequest.get(url)];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    Index2.prototype.updateSettings = function(settings) {
      return __awaiter(this, void 0, void 0, function() {
        var url, task;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "indexes/".concat(this.uid, "/settings");
              return [4, this.httpRequest.patch(url, settings)];
            case 1:
              task = _a.sent();
              task.enqueued = new Date(task.enqueuedAt);
              return [2, task];
          }
        });
      });
    };
    Index2.prototype.resetSettings = function() {
      return __awaiter(this, void 0, void 0, function() {
        var url, task;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "indexes/".concat(this.uid, "/settings");
              return [4, this.httpRequest["delete"](url)];
            case 1:
              task = _a.sent();
              task.enqueuedAt = new Date(task.enqueuedAt);
              return [2, task];
          }
        });
      });
    };
    Index2.prototype.getPagination = function() {
      return __awaiter(this, void 0, void 0, function() {
        var url;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "indexes/".concat(this.uid, "/settings/pagination");
              return [4, this.httpRequest.get(url)];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    Index2.prototype.updatePagination = function(pagination) {
      return __awaiter(this, void 0, void 0, function() {
        var url, task;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "indexes/".concat(this.uid, "/settings/pagination");
              return [4, this.httpRequest.patch(url, pagination)];
            case 1:
              task = _a.sent();
              return [2, new EnqueuedTask(task)];
          }
        });
      });
    };
    Index2.prototype.resetPagination = function() {
      return __awaiter(this, void 0, void 0, function() {
        var url, task;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "indexes/".concat(this.uid, "/settings/pagination");
              return [4, this.httpRequest["delete"](url)];
            case 1:
              task = _a.sent();
              return [2, new EnqueuedTask(task)];
          }
        });
      });
    };
    Index2.prototype.getSynonyms = function() {
      return __awaiter(this, void 0, void 0, function() {
        var url;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "indexes/".concat(this.uid, "/settings/synonyms");
              return [4, this.httpRequest.get(url)];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    Index2.prototype.updateSynonyms = function(synonyms) {
      return __awaiter(this, void 0, void 0, function() {
        var url, task;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "indexes/".concat(this.uid, "/settings/synonyms");
              return [4, this.httpRequest.put(url, synonyms)];
            case 1:
              task = _a.sent();
              return [2, new EnqueuedTask(task)];
          }
        });
      });
    };
    Index2.prototype.resetSynonyms = function() {
      return __awaiter(this, void 0, void 0, function() {
        var url, task;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "indexes/".concat(this.uid, "/settings/synonyms");
              return [4, this.httpRequest["delete"](url)];
            case 1:
              task = _a.sent();
              task.enqueuedAt = new Date(task.enqueuedAt);
              return [2, task];
          }
        });
      });
    };
    Index2.prototype.getStopWords = function() {
      return __awaiter(this, void 0, void 0, function() {
        var url;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "indexes/".concat(this.uid, "/settings/stop-words");
              return [4, this.httpRequest.get(url)];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    Index2.prototype.updateStopWords = function(stopWords) {
      return __awaiter(this, void 0, void 0, function() {
        var url, task;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "indexes/".concat(this.uid, "/settings/stop-words");
              return [4, this.httpRequest.put(url, stopWords)];
            case 1:
              task = _a.sent();
              return [2, new EnqueuedTask(task)];
          }
        });
      });
    };
    Index2.prototype.resetStopWords = function() {
      return __awaiter(this, void 0, void 0, function() {
        var url, task;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "indexes/".concat(this.uid, "/settings/stop-words");
              return [4, this.httpRequest["delete"](url)];
            case 1:
              task = _a.sent();
              task.enqueuedAt = new Date(task.enqueuedAt);
              return [2, task];
          }
        });
      });
    };
    Index2.prototype.getRankingRules = function() {
      return __awaiter(this, void 0, void 0, function() {
        var url;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "indexes/".concat(this.uid, "/settings/ranking-rules");
              return [4, this.httpRequest.get(url)];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    Index2.prototype.updateRankingRules = function(rankingRules) {
      return __awaiter(this, void 0, void 0, function() {
        var url, task;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "indexes/".concat(this.uid, "/settings/ranking-rules");
              return [4, this.httpRequest.put(url, rankingRules)];
            case 1:
              task = _a.sent();
              return [2, new EnqueuedTask(task)];
          }
        });
      });
    };
    Index2.prototype.resetRankingRules = function() {
      return __awaiter(this, void 0, void 0, function() {
        var url, task;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "indexes/".concat(this.uid, "/settings/ranking-rules");
              return [4, this.httpRequest["delete"](url)];
            case 1:
              task = _a.sent();
              task.enqueuedAt = new Date(task.enqueuedAt);
              return [2, task];
          }
        });
      });
    };
    Index2.prototype.getDistinctAttribute = function() {
      return __awaiter(this, void 0, void 0, function() {
        var url;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "indexes/".concat(this.uid, "/settings/distinct-attribute");
              return [4, this.httpRequest.get(url)];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    Index2.prototype.updateDistinctAttribute = function(distinctAttribute) {
      return __awaiter(this, void 0, void 0, function() {
        var url, task;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "indexes/".concat(this.uid, "/settings/distinct-attribute");
              return [4, this.httpRequest.put(url, distinctAttribute)];
            case 1:
              task = _a.sent();
              return [2, new EnqueuedTask(task)];
          }
        });
      });
    };
    Index2.prototype.resetDistinctAttribute = function() {
      return __awaiter(this, void 0, void 0, function() {
        var url, task;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "indexes/".concat(this.uid, "/settings/distinct-attribute");
              return [4, this.httpRequest["delete"](url)];
            case 1:
              task = _a.sent();
              task.enqueuedAt = new Date(task.enqueuedAt);
              return [2, task];
          }
        });
      });
    };
    Index2.prototype.getFilterableAttributes = function() {
      return __awaiter(this, void 0, void 0, function() {
        var url;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "indexes/".concat(this.uid, "/settings/filterable-attributes");
              return [4, this.httpRequest.get(url)];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    Index2.prototype.updateFilterableAttributes = function(filterableAttributes) {
      return __awaiter(this, void 0, void 0, function() {
        var url, task;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "indexes/".concat(this.uid, "/settings/filterable-attributes");
              return [4, this.httpRequest.put(url, filterableAttributes)];
            case 1:
              task = _a.sent();
              return [2, new EnqueuedTask(task)];
          }
        });
      });
    };
    Index2.prototype.resetFilterableAttributes = function() {
      return __awaiter(this, void 0, void 0, function() {
        var url, task;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "indexes/".concat(this.uid, "/settings/filterable-attributes");
              return [4, this.httpRequest["delete"](url)];
            case 1:
              task = _a.sent();
              task.enqueuedAt = new Date(task.enqueuedAt);
              return [2, task];
          }
        });
      });
    };
    Index2.prototype.getSortableAttributes = function() {
      return __awaiter(this, void 0, void 0, function() {
        var url;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "indexes/".concat(this.uid, "/settings/sortable-attributes");
              return [4, this.httpRequest.get(url)];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    Index2.prototype.updateSortableAttributes = function(sortableAttributes) {
      return __awaiter(this, void 0, void 0, function() {
        var url, task;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "indexes/".concat(this.uid, "/settings/sortable-attributes");
              return [4, this.httpRequest.put(url, sortableAttributes)];
            case 1:
              task = _a.sent();
              return [2, new EnqueuedTask(task)];
          }
        });
      });
    };
    Index2.prototype.resetSortableAttributes = function() {
      return __awaiter(this, void 0, void 0, function() {
        var url, task;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "indexes/".concat(this.uid, "/settings/sortable-attributes");
              return [4, this.httpRequest["delete"](url)];
            case 1:
              task = _a.sent();
              task.enqueuedAt = new Date(task.enqueuedAt);
              return [2, task];
          }
        });
      });
    };
    Index2.prototype.getSearchableAttributes = function() {
      return __awaiter(this, void 0, void 0, function() {
        var url;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "indexes/".concat(this.uid, "/settings/searchable-attributes");
              return [4, this.httpRequest.get(url)];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    Index2.prototype.updateSearchableAttributes = function(searchableAttributes) {
      return __awaiter(this, void 0, void 0, function() {
        var url, task;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "indexes/".concat(this.uid, "/settings/searchable-attributes");
              return [4, this.httpRequest.put(url, searchableAttributes)];
            case 1:
              task = _a.sent();
              return [2, new EnqueuedTask(task)];
          }
        });
      });
    };
    Index2.prototype.resetSearchableAttributes = function() {
      return __awaiter(this, void 0, void 0, function() {
        var url, task;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "indexes/".concat(this.uid, "/settings/searchable-attributes");
              return [4, this.httpRequest["delete"](url)];
            case 1:
              task = _a.sent();
              task.enqueuedAt = new Date(task.enqueuedAt);
              return [2, task];
          }
        });
      });
    };
    Index2.prototype.getDisplayedAttributes = function() {
      return __awaiter(this, void 0, void 0, function() {
        var url;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "indexes/".concat(this.uid, "/settings/displayed-attributes");
              return [4, this.httpRequest.get(url)];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    Index2.prototype.updateDisplayedAttributes = function(displayedAttributes) {
      return __awaiter(this, void 0, void 0, function() {
        var url, task;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "indexes/".concat(this.uid, "/settings/displayed-attributes");
              return [4, this.httpRequest.put(url, displayedAttributes)];
            case 1:
              task = _a.sent();
              return [2, new EnqueuedTask(task)];
          }
        });
      });
    };
    Index2.prototype.resetDisplayedAttributes = function() {
      return __awaiter(this, void 0, void 0, function() {
        var url, task;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "indexes/".concat(this.uid, "/settings/displayed-attributes");
              return [4, this.httpRequest["delete"](url)];
            case 1:
              task = _a.sent();
              task.enqueuedAt = new Date(task.enqueuedAt);
              return [2, task];
          }
        });
      });
    };
    Index2.prototype.getTypoTolerance = function() {
      return __awaiter(this, void 0, void 0, function() {
        var url;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "indexes/".concat(this.uid, "/settings/typo-tolerance");
              return [4, this.httpRequest.get(url)];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    Index2.prototype.updateTypoTolerance = function(typoTolerance) {
      return __awaiter(this, void 0, void 0, function() {
        var url, task;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "indexes/".concat(this.uid, "/settings/typo-tolerance");
              return [4, this.httpRequest.patch(url, typoTolerance)];
            case 1:
              task = _a.sent();
              task.enqueuedAt = new Date(task.enqueuedAt);
              return [2, task];
          }
        });
      });
    };
    Index2.prototype.resetTypoTolerance = function() {
      return __awaiter(this, void 0, void 0, function() {
        var url, task;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "indexes/".concat(this.uid, "/settings/typo-tolerance");
              return [4, this.httpRequest["delete"](url)];
            case 1:
              task = _a.sent();
              task.enqueuedAt = new Date(task.enqueuedAt);
              return [2, task];
          }
        });
      });
    };
    Index2.prototype.getFaceting = function() {
      return __awaiter(this, void 0, void 0, function() {
        var url;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "indexes/".concat(this.uid, "/settings/faceting");
              return [4, this.httpRequest.get(url)];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    Index2.prototype.updateFaceting = function(faceting) {
      return __awaiter(this, void 0, void 0, function() {
        var url, task;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "indexes/".concat(this.uid, "/settings/faceting");
              return [4, this.httpRequest.patch(url, faceting)];
            case 1:
              task = _a.sent();
              return [2, new EnqueuedTask(task)];
          }
        });
      });
    };
    Index2.prototype.resetFaceting = function() {
      return __awaiter(this, void 0, void 0, function() {
        var url, task;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "indexes/".concat(this.uid, "/settings/faceting");
              return [4, this.httpRequest["delete"](url)];
            case 1:
              task = _a.sent();
              return [2, new EnqueuedTask(task)];
          }
        });
      });
    };
    return Index2;
  }()
);
var Client = (
  /** @class */
  function() {
    function Client2(config) {
      this.config = config;
      this.httpRequest = new HttpRequests(config);
      this.tasks = new TaskClient(config);
    }
    Client2.prototype.index = function(indexUid) {
      return new Index(this.config, indexUid);
    };
    Client2.prototype.getIndex = function(indexUid) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          return [2, new Index(this.config, indexUid).fetchInfo()];
        });
      });
    };
    Client2.prototype.getRawIndex = function(indexUid) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          return [2, new Index(this.config, indexUid).getRawInfo()];
        });
      });
    };
    Client2.prototype.getIndexes = function(parameters) {
      if (parameters === void 0) {
        parameters = {};
      }
      return __awaiter(this, void 0, void 0, function() {
        var rawIndexes, indexes;
        var _this = this;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.getRawIndexes(parameters)];
            case 1:
              rawIndexes = _a.sent();
              indexes = rawIndexes.results.map(function(index) {
                return new Index(_this.config, index.uid, index.primaryKey);
              });
              return [2, __assign(__assign({}, rawIndexes), { results: indexes })];
          }
        });
      });
    };
    Client2.prototype.getRawIndexes = function(parameters) {
      if (parameters === void 0) {
        parameters = {};
      }
      return __awaiter(this, void 0, void 0, function() {
        var url;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "indexes";
              return [4, this.httpRequest.get(url, parameters)];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    Client2.prototype.createIndex = function(uid, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, Index.create(uid, options, this.config)];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    Client2.prototype.updateIndex = function(uid, options) {
      if (options === void 0) {
        options = {};
      }
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, new Index(this.config, uid).update(options)];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    Client2.prototype.deleteIndex = function(uid) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, new Index(this.config, uid)["delete"]()];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    Client2.prototype.deleteIndexIfExists = function(uid) {
      return __awaiter(this, void 0, void 0, function() {
        var e_1;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              _a.trys.push([0, 2, , 3]);
              return [4, this.deleteIndex(uid)];
            case 1:
              _a.sent();
              return [2, true];
            case 2:
              e_1 = _a.sent();
              if (e_1.code === "index_not_found") {
                return [2, false];
              }
              throw e_1;
            case 3:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    Client2.prototype.swapIndexes = function(params) {
      return __awaiter(this, void 0, void 0, function() {
        var url;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "/swap-indexes";
              return [4, this.httpRequest.post(url, params)];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    Client2.prototype.multiSearch = function(queries, config) {
      return __awaiter(this, void 0, void 0, function() {
        var url;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "multi-search";
              return [4, this.httpRequest.post(url, queries, void 0, config)];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    Client2.prototype.getTasks = function(parameters) {
      if (parameters === void 0) {
        parameters = {};
      }
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.tasks.getTasks(parameters)];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    Client2.prototype.getTask = function(taskUid) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.tasks.getTask(taskUid)];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    Client2.prototype.waitForTasks = function(taskUids, _a) {
      var _b = _a === void 0 ? {} : _a, _c = _b.timeOutMs, timeOutMs = _c === void 0 ? 5e3 : _c, _d = _b.intervalMs, intervalMs = _d === void 0 ? 50 : _d;
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_e) {
          switch (_e.label) {
            case 0:
              return [4, this.tasks.waitForTasks(taskUids, {
                timeOutMs,
                intervalMs
              })];
            case 1:
              return [2, _e.sent()];
          }
        });
      });
    };
    Client2.prototype.waitForTask = function(taskUid, _a) {
      var _b = _a === void 0 ? {} : _a, _c = _b.timeOutMs, timeOutMs = _c === void 0 ? 5e3 : _c, _d = _b.intervalMs, intervalMs = _d === void 0 ? 50 : _d;
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_e) {
          switch (_e.label) {
            case 0:
              return [4, this.tasks.waitForTask(taskUid, {
                timeOutMs,
                intervalMs
              })];
            case 1:
              return [2, _e.sent()];
          }
        });
      });
    };
    Client2.prototype.cancelTasks = function(parameters) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.tasks.cancelTasks(parameters)];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    Client2.prototype.deleteTasks = function(parameters) {
      if (parameters === void 0) {
        parameters = {};
      }
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.tasks.deleteTasks(parameters)];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    Client2.prototype.getKeys = function(parameters) {
      if (parameters === void 0) {
        parameters = {};
      }
      return __awaiter(this, void 0, void 0, function() {
        var url, keys;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "keys";
              return [4, this.httpRequest.get(url, parameters)];
            case 1:
              keys = _a.sent();
              keys.results = keys.results.map(function(key) {
                return __assign(__assign({}, key), { createdAt: new Date(key.createdAt), updateAt: new Date(key.updateAt) });
              });
              return [2, keys];
          }
        });
      });
    };
    Client2.prototype.getKey = function(keyOrUid) {
      return __awaiter(this, void 0, void 0, function() {
        var url;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "keys/".concat(keyOrUid);
              return [4, this.httpRequest.get(url)];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    Client2.prototype.createKey = function(options) {
      return __awaiter(this, void 0, void 0, function() {
        var url;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "keys";
              return [4, this.httpRequest.post(url, options)];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    Client2.prototype.updateKey = function(keyOrUid, options) {
      return __awaiter(this, void 0, void 0, function() {
        var url;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "keys/".concat(keyOrUid);
              return [4, this.httpRequest.patch(url, options)];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    Client2.prototype.deleteKey = function(keyOrUid) {
      return __awaiter(this, void 0, void 0, function() {
        var url;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "keys/".concat(keyOrUid);
              return [4, this.httpRequest["delete"](url)];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    Client2.prototype.health = function() {
      return __awaiter(this, void 0, void 0, function() {
        var url;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "health";
              return [4, this.httpRequest.get(url)];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    Client2.prototype.isHealthy = function() {
      return __awaiter(this, void 0, void 0, function() {
        var url;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              _a.trys.push([0, 2, , 3]);
              url = "health";
              return [4, this.httpRequest.get(url)];
            case 1:
              _a.sent();
              return [2, true];
            case 2:
              _a.sent();
              return [2, false];
            case 3:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    Client2.prototype.getStats = function() {
      return __awaiter(this, void 0, void 0, function() {
        var url;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "stats";
              return [4, this.httpRequest.get(url)];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    Client2.prototype.getVersion = function() {
      return __awaiter(this, void 0, void 0, function() {
        var url;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "version";
              return [4, this.httpRequest.get(url)];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    Client2.prototype.createDump = function() {
      return __awaiter(this, void 0, void 0, function() {
        var url, task;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              url = "dumps";
              return [4, this.httpRequest.post(url)];
            case 1:
              task = _a.sent();
              return [2, new EnqueuedTask(task)];
          }
        });
      });
    };
    Client2.prototype.generateTenantToken = function(_apiKeyUid, _searchRules, _options) {
      var error = new Error();
      throw new Error("Meilisearch: failed to generate a tenant token. Generation of a token only works in a node environment \n ".concat(error.stack, "."));
    };
    return Client2;
  }()
);
function encode64(data) {
  return Buffer.from(JSON.stringify(data)).toString("base64");
}
function sign(apiKey, encodedHeader, encodedPayload) {
  return import_crypto.default.createHmac("sha256", apiKey).update("".concat(encodedHeader, ".").concat(encodedPayload)).digest("base64").replace(/\+/g, "-").replace(/\//g, "_").replace(/=/g, "");
}
function createHeader() {
  var header = {
    alg: "HS256",
    typ: "JWT"
  };
  return encode64(header).replace(/=/g, "");
}
function validateTokenParameters(tokenParams) {
  var searchRules = tokenParams.searchRules, uid = tokenParams.uid, apiKey = tokenParams.apiKey, expiresAt = tokenParams.expiresAt;
  if (expiresAt) {
    if (!(expiresAt instanceof Date)) {
      throw new MeiliSearchError("Meilisearch: The expiredAt field must be an instance of Date.");
    } else if (expiresAt.getTime() < Date.now()) {
      throw new MeiliSearchError("Meilisearch: The expiresAt field must be a date in the future.");
    }
  }
  if (searchRules) {
    if (!(typeof searchRules === "object" || Array.isArray(searchRules))) {
      throw new MeiliSearchError("Meilisearch: The search rules added in the token generation must be of type array or object.");
    }
  }
  if (!apiKey || typeof apiKey !== "string") {
    throw new MeiliSearchError("Meilisearch: The API key used for the token generation must exist and be of type string.");
  }
  if (!uid || typeof uid !== "string") {
    throw new MeiliSearchError("Meilisearch: The uid of the api key used for the token generation must exist, be of type string and comply to the uuid4 format.");
  }
  if (!validateUuid4(uid)) {
    throw new MeiliSearchError("Meilisearch: The uid of your key is not a valid uuid4. To find out the uid of your key use getKey().");
  }
}
function createPayload(payloadParams) {
  var searchRules = payloadParams.searchRules, uid = payloadParams.uid, expiresAt = payloadParams.expiresAt;
  var payload = {
    searchRules,
    apiKeyUid: uid,
    exp: expiresAt === null || expiresAt === void 0 ? void 0 : expiresAt.getTime()
  };
  return encode64(payload).replace(/=/g, "");
}
var Token = (
  /** @class */
  function() {
    function Token2(config) {
      this.config = config;
    }
    Token2.prototype.generateTenantToken = function(apiKeyUid, searchRules, options) {
      var apiKey = (options === null || options === void 0 ? void 0 : options.apiKey) || this.config.apiKey || "";
      var uid = apiKeyUid || "";
      var expiresAt = options === null || options === void 0 ? void 0 : options.expiresAt;
      validateTokenParameters({ apiKey, uid, expiresAt, searchRules });
      var encodedHeader = createHeader();
      var encodedPayload = createPayload({ searchRules, uid, expiresAt });
      var signature = sign(apiKey, encodedHeader, encodedPayload);
      return "".concat(encodedHeader, ".").concat(encodedPayload, ".").concat(signature);
    };
    return Token2;
  }()
);
var MeiliSearch = (
  /** @class */
  function(_super) {
    __extends(MeiliSearch2, _super);
    function MeiliSearch2(config) {
      var _this = _super.call(this, config) || this;
      _this.tokens = new Token(config);
      return _this;
    }
    MeiliSearch2.prototype.generateTenantToken = function(apiKeyUid, searchRules, options) {
      if (typeof window === "undefined") {
        return this.tokens.generateTenantToken(apiKeyUid, searchRules, options);
      }
      return _super.prototype.generateTenantToken.call(this, apiKeyUid, searchRules, options);
    };
    return MeiliSearch2;
  }(Client)
);
export {
  ContentTypeEnum,
  EnqueuedTask,
  Index,
  MatchingStrategies,
  MeiliSearch,
  MeiliSearchApiError,
  MeiliSearchCommunicationError,
  MeiliSearchError,
  MeiliSearchTimeOutError,
  Task,
  TaskClient,
  MeiliSearch as default,
  httpErrorHandler,
  httpResponseErrorHandler
};
//# sourceMappingURL=meilisearch.js.map
